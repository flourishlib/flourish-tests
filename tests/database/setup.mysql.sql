CREATE TABLE users (
	user_id INTEGER PRIMARY KEY AUTO_INCREMENT,
	first_name VARCHAR(100) NOT NULL,
	middle_initial VARCHAR(100) NOT NULL DEFAULT '',
	last_name VARCHAR(100) NOT NULL,
	email_address VARCHAR(200) NOT NULL UNIQUE,
	status ENUM('Active', 'Inactive', 'Pending') NOT NULL DEFAULT 'Active',
	times_logged_in INTEGER NOT NULL DEFAULT 0,
	date_created TIMESTAMP NOT NULL,
	birthday DATE COMMENT 'The birthday',
	time_of_last_login TIME COMMENT 'When the user last logged in',
	is_validated BOOLEAN NOT NULL DEFAULT FALSE,
	hashed_password VARCHAR(100) NOT NULL COMMENT 'This hash is generated using fCryptography::hashPassword()'
)ENGINE=InnoDB, CHARACTER SET utf8;

CREATE TABLE groups (
	group_id INTEGER PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(255) NOT NULL UNIQUE,
	group_leader INTEGER,
	FOREIGN KEY (group_leader) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE,
	group_founder INTEGER,
	FOREIGN KEY (group_founder) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE
)ENGINE=InnoDB, CHARACTER SET utf8;

CREATE TABLE users_groups (
	user_id INTEGER NOT NULL,
	FOREIGN KEY (user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE,
	group_id INTEGER NOT NULL,
	FOREIGN KEY (group_id) REFERENCES groups(group_id) ON UPDATE CASCADE ON DELETE CASCADE,
	PRIMARY KEY(user_id, group_id)
)ENGINE=InnoDB, CHARACTER SET utf8;

CREATE TABLE artists (
	artist_id INTEGER PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(255) NOT NULL UNIQUE
)ENGINE=InnoDB, CHARACTER SET utf8;

CREATE TABLE albums (
	album_id INTEGER PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(255) NOT NULL,
	year_released INTEGER NOT NULL,
	msrp DECIMAL(10,2) NOT NULL,
	genre VARCHAR(100) NOT NULL DEFAULT '',
	artist_id INTEGER NOT NULL,
	FOREIGN KEY (artist_id) REFERENCES artists(artist_id) ON UPDATE CASCADE ON DELETE CASCADE,
	UNIQUE (artist_id, name)
)ENGINE=InnoDB, CHARACTER SET utf8;

CREATE TABLE songs (
	song_id INTEGER PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(255) NOT NULL,
	length TIME NOT NULL,
	album_id INTEGER NOT NULL,
	FOREIGN KEY (album_id) REFERENCES albums(album_id) ON UPDATE CASCADE ON DELETE CASCADE,
	track_number INTEGER NOT NULL,
	UNIQUE(track_number, album_id)
)ENGINE=InnoDB, CHARACTER SET utf8;

CREATE TABLE owns_on_cd (
	user_id INTEGER NOT NULL,
	FOREIGN KEY (user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE,
	album_id INTEGER NOT NULL,
	FOREIGN KEY (album_id) REFERENCES albums(album_id) ON UPDATE CASCADE ON DELETE CASCADE,
	PRIMARY KEY(user_id, album_id)
)ENGINE=InnoDB, CHARACTER SET utf8;

CREATE TABLE owns_on_tape (
	user_id INTEGER NOT NULL,
	FOREIGN KEY (user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE,
	album_id INTEGER NOT NULL,
	FOREIGN KEY (album_id) REFERENCES albums(album_id) ON UPDATE CASCADE ON DELETE CASCADE,
	PRIMARY KEY(user_id, album_id)
)ENGINE=InnoDB, CHARACTER SET utf8;

CREATE TABLE blobs (
	blob_id INTEGER PRIMARY KEY,
	data BLOB NOT NULL
)ENGINE=InnoDB, CHARACTER SET utf8;

CREATE VIEW view_users AS SELECT * FROM users;